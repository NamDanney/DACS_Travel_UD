{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\OneDrive\\\\Desktop\\\\DACS_Travel_PhuYen\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// const AuthContext = createContext(null);\n\n// export const AuthProvider = ({ children }) => {\n//     const [user, setUser] = useState(null);\n//     const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//     useEffect(() => {\n//         // Check if user is logged in on mount\n//         const storedUser = localStorage.getItem('user');\n//         const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n\n//         if (storedUser && token) {\n//             setUser(JSON.parse(storedUser));\n//             setIsAuthenticated(true);\n//         }\n//     }, []);\n\n//     const login = (userData) => {\n//         setUser({\n//             id: userData.id,\n//             username: userData.username,\n//             email: userData.email,\n//             fullName: userData.fullName,\n//             phone: userData.phone,\n//             role: userData.role \n//         });\n//         setIsAuthenticated(true);\n//     };\n\n//     const logout = () => {\n//         setUser(null);\n//         setIsAuthenticated(false);\n//         localStorage.removeItem('user');\n//         localStorage.removeItem('token');\n//         sessionStorage.removeItem('token');\n//     };\n\n//     return (\n//         <AuthContext.Provider value={{ user, isAuthenticated, login, logout }}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// };\n\n// export const useAuth = () => {\n//     const context = useContext(AuthContext);\n//     if (!context) {\n//         throw new Error('useAuth must be used within an AuthProvider');\n//     }\n//     return context;\n// };\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check if user is logged in on mount\n    const storedUser = localStorage.getItem('user');\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    if (storedUser && token) {\n      setUser(JSON.parse(storedUser));\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  // Thêm hàm getToken để đảm bảo luôn lấy token mới nhất\n  const getToken = () => {\n    return localStorage.getItem('token') || sessionStorage.getItem('token');\n  };\n  const login = (userData, token, rememberMe = true) => {\n    // Set user in state\n    setUser({\n      id: userData.id,\n      username: userData.username,\n      email: userData.email,\n      fullName: userData.fullName || userData.full_name,\n      phone: userData.phone,\n      role: userData.role\n    });\n    setIsAuthenticated(true);\n\n    // Lưu user vào localStorage\n    localStorage.setItem('user', JSON.stringify(userData));\n\n    // Lưu token vào localStorage hoặc sessionStorage tùy theo rememberMe\n    if (rememberMe) {\n      localStorage.setItem('token', token);\n    } else {\n      sessionStorage.setItem('token', token);\n    }\n    console.log('Token saved:', token); // Debug log\n  };\n  const logout = () => {\n    // Clear state\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // Clear storage\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('token');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      login,\n      logout,\n      getToken // Xuất ra hàm getToken để các component con có thể sử dụng\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Uq7KcTiOseX3k63CKoUNgtSkdNA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","storedUser","localStorage","getItem","token","sessionStorage","JSON","parse","getToken","login","userData","rememberMe","id","username","email","fullName","full_name","phone","role","setItem","stringify","console","log","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/admin/OneDrive/Desktop/DACS_Travel_PhuYen/frontend/src/contexts/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// const AuthContext = createContext(null);\n\n// export const AuthProvider = ({ children }) => {\n//     const [user, setUser] = useState(null);\n//     const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//     useEffect(() => {\n//         // Check if user is logged in on mount\n//         const storedUser = localStorage.getItem('user');\n//         const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n        \n//         if (storedUser && token) {\n//             setUser(JSON.parse(storedUser));\n//             setIsAuthenticated(true);\n//         }\n//     }, []);\n\n//     const login = (userData) => {\n//         setUser({\n//             id: userData.id,\n//             username: userData.username,\n//             email: userData.email,\n//             fullName: userData.fullName,\n//             phone: userData.phone,\n//             role: userData.role \n//         });\n//         setIsAuthenticated(true);\n//     };\n\n//     const logout = () => {\n//         setUser(null);\n//         setIsAuthenticated(false);\n//         localStorage.removeItem('user');\n//         localStorage.removeItem('token');\n//         sessionStorage.removeItem('token');\n//     };\n\n//     return (\n//         <AuthContext.Provider value={{ user, isAuthenticated, login, logout }}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// };\n\n// export const useAuth = () => {\n//     const context = useContext(AuthContext);\n//     if (!context) {\n//         throw new Error('useAuth must be used within an AuthProvider');\n//     }\n//     return context;\n// };\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    useEffect(() => {\n        // Check if user is logged in on mount\n        const storedUser = localStorage.getItem('user');\n        const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n        \n        if (storedUser && token) {\n            setUser(JSON.parse(storedUser));\n            setIsAuthenticated(true);\n        }\n    }, []);\n\n    // Thêm hàm getToken để đảm bảo luôn lấy token mới nhất\n    const getToken = () => {\n        return localStorage.getItem('token') || sessionStorage.getItem('token');\n    };\n\n    const login = (userData, token, rememberMe = true) => {\n        // Set user in state\n        setUser({\n            id: userData.id,\n            username: userData.username,\n            email: userData.email,\n            fullName: userData.fullName || userData.full_name,\n            phone: userData.phone,\n            role: userData.role \n        });\n        setIsAuthenticated(true);\n        \n        // Lưu user vào localStorage\n        localStorage.setItem('user', JSON.stringify(userData));\n        \n        // Lưu token vào localStorage hoặc sessionStorage tùy theo rememberMe\n        if (rememberMe) {\n            localStorage.setItem('token', token);\n        } else {\n            sessionStorage.setItem('token', token);\n        }\n\n        console.log('Token saved:', token); // Debug log\n    };\n\n    const logout = () => {\n        // Clear state\n        setUser(null);\n        setIsAuthenticated(false);\n        \n        // Clear storage\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n        sessionStorage.removeItem('user');\n        sessionStorage.removeItem('token');\n    };\n\n    return (\n        <AuthContext.Provider value={{ \n            user, \n            isAuthenticated, \n            login, \n            logout,\n            getToken // Xuất ra hàm getToken để các component con có thể sử dụng\n        }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}